{"version":3,"file":"console.js","sources":["../src/console-manager.js","../src/store.js","../src/utils.js","../src/views/console.svelte","../src/console-view.js","../src/config.js","../src/console.js"],"sourcesContent":["import { Emitter } from 'event-kit';\n\nexport default class ConsoleManager {\n  constructor(view) {\n    this.view = view;\n    this.emitter = new Emitter();\n  }\n\n  destroy() {\n    this.emitter?.dispose();\n  }\n\n  // Toggle console panel\n  hide() {\n    this.view.hide();\n  }\n\n  show() {\n    this.view.show();\n  }\n\n  toggle() {\n    this.view.toggle();\n  }\n\n  stickBottom() {\n    this.view.stickTop = false;\n  }\n\n  stickTop() {\n    this.view.stickTop = true;\n  }\n\n  // Log message with default level\n  log(message, level = 'log') {\n    this.view.log(message, level);\n  }\n\n  // Log error\n  error(message) {\n    this.log(message, 'error');\n  }\n\n  // Log warning\n  warn(message) {\n    this.log(message, 'warning');\n  }\n\n  // Log notice\n  info(message) {\n    this.log(message, 'info');\n  }\n\n  // Log debug message\n  debug(message) {\n    this.log(message, 'debug');\n  }\n\n  // Log raw text\n  raw(rawText, level = 'info', lineEnding = '\\n') {\n    rawText.split(lineEnding).map((line) => {\n      this.log(line, level);\n    });\n  }\n\n  // Clear console panel\n  clear() {\n    this.view.clear();\n  }\n}\n","import { writable } from 'svelte/store';\n\nexport default writable({\n    lines: [],\n    showTimestamp: true,\n    clear: false,\n    filters: []\n});\n","function getConfig(key = '') {\n  const packageName = 'console';\n\n  return (key\n    ? atom.config.get(`${packageName}.${key}`)\n    : atom.config.get(packageName)\n  );\n}\n\nfunction showDock() {\n  const panelLocation = getConfig('panelLocation');\n\n  switch (panelLocation.toLowerCase()) {\n    case 'left':\n      atom.workspace.getLeftDock().show();\n      break;\n\n    case 'right':\n      atom.workspace.getRightDock().show();\n      break;\n\n    default:\n      atom.workspace.getBottomDock().show();\n      break;\n  }\n}\n\nfunction hideDock() {\n  const panelLocation = getConfig('panelLocation');\n\n  switch (panelLocation.toLowerCase()) {\n    case 'left':\n      atom.workspace.getLeftDock().hide();\n      break;\n\n    case 'right':\n      atom.workspace.getRightDock().hide();\n      break;\n\n    default:\n      atom.workspace.getBottomDock().hide();\n      break;\n  }\n}\n\nfunction getTimestamp() {\n  const date = new Date();\n\n  const hh = `0${date.getHours()}`.slice(-2);\n  const mm = `0${date.getMinutes()}`.slice(-2);\n  const ss = `0${date.getSeconds()}`.slice(-2);\n  const ms = `${date.getMilliseconds()}0`.slice(0, 3);\n\n  return {\n    visible: `${hh}:${mm}:${ss}.${ms}`,\n    tooltip: date.toString()\n  };\n}\n\nfunction mapLevel(level) {\n  switch (level) {\n    case 'debug':\n      return {\n        text: `debug`,\n        icon: 'icon-bug'\n      };\n\n    case 'error':\n      return {\n        text: `error`,\n        icon: 'icon-flame'\n      };\n\n    case 'info':\n      return {\n        text: `info`,\n        icon: 'icon-info'\n      };\n\n    case 'warn':\n    case 'warning':\n      return {\n        text: `warning`,\n        icon: 'icon-issue-opened'\n      };\n\n    case 'raw':\n      return {\n        text: `info`,\n        icon: 'icon-code'\n      };\n\n    default: {\n      return {\n        text: `highlight`,\n        icon: 'icon-quote'\n      };\n    }\n  }\n}\n\nfunction handleOverflow() {\n  return getConfig('wordWrap')\n  ? `\n    overflow: hidden;\n    white-space: pre-wrap;\n  ` : '';\n}\n\nfunction initStatusBarHeight() {\n  const statusBar = document.querySelector('status-bar');\n\n  if (statusBar?.offsetHeight) {\n    document.documentElement.style.setProperty('--status-bar-height', `${statusBar.offsetHeight}px`);\n  }\n}\n\nexport {\n  getConfig,\n  getTimestamp,\n  handleOverflow,\n  hideDock,\n  initStatusBarHeight,\n  mapLevel,\n  showDock\n};\n","<script>\n\n    import { afterUpdate, onDestroy, onMount } from 'svelte';\n    import store from '../store';\n    import { handleOverflow, initStatusBarHeight, mapLevel } from '../utils';\n\n\n    let lines;\n    const unsubscribe = store.subscribe(state => {\n\n      switch (state.action) {\n\n        case 'log':\n          lines = [\n            ...state.lines\n          ];\n          break;\n\n        case 'clear':\n          lines = [];\n          break;\n\n        default:\n          break;\n\n        }\n\n      return lines;\n    });\n\n    let div;\n\n    afterUpdate(() => {\n      div.scrollTo({\n        left: 0,\n        top: div.scrollHeight,\n        behaviour: 'smooth'\n      });\n    });\n\n    const scrollToTop = () => {\n      div.scrollTo({\n        top: 0,\n        left: 0,\n        behaviour: 'smooth'\n      });\n    };\n\n    let wordWrap;\n    atom.config.observe('console.wordWrap', newValue => {\n      wordWrap = newValue\n    });\n\n    let showTimestamp;\n    atom.config.observe('console.showTimestamp', newValue => {\n      showTimestamp = newValue\n    });\n\n    let coloredBadges;\n    atom.config.observe('console.coloredBadges', newValue => {\n      coloredBadges = newValue\n        ? 'badge'\n        : 'text';\n    });\n\n    let filters = [];\n    const filterHandler = event => {\n      event.target.classList.toggle('selected');\n\n      const filter = event.target.innerText.toLowerCase();\n\n      store.update(state => {\n        if (state.filters.includes(filter)) {\n          const index = state.filters.indexOf(filter);\n          state.filters.splice(index, 1);\n        } else {\n          state.filters.push(filter);\n        }\n\n        filters = state.filters;\n\n        return state;\n      });\n    }\n\n    onMount(() => initStatusBarHeight());\n    onDestroy(unsubscribe);\n</script>\n\n<div class='block'>\n  <div class='btn-group'>\n    <button class=\"btn icon icon-quote\" on:click={filterHandler}>Log</button>\n    <button class=\"btn icon icon-info\" on:click={filterHandler}>Info</button>\n    <button class=\"btn icon icon-issue-opened\" on:click={filterHandler}>Warning</button>\n    <button class=\"btn icon icon-flame\" on:click={filterHandler}>Error</button>\n  </div>\n</div>\n\n<div class=\"panel-body scrollable\" bind:this={div}>\n    <div class=\"console-lines\" tabindex=\"-1\">\n      {#each lines as {level, message, timestamp}}\n        <p hidden={filters.length && !filters.includes(level)}>\n          {#if typeof message === 'string'}\n            {#if showTimestamp}\n              <div class=\"timestamp {mapLevel(level).text}\">\n                <pre class=\"badge {coloredBadges}-{mapLevel(level).text} icon {mapLevel(level).icon}\" on:click={scrollToTop}>\n                  <span title={timestamp.tooltip}>{timestamp.visible}</span>\n                </pre>\n              </div>\n            {/if}\n            <pre class=\"message\" style={wordWrap && handleOverflow()}>{message}</pre>\n          {:else}\n            {message}\n          {/if}\n        </p>\n      {/each}\n    </div>\n</div>\n\n<style type=\"text/scss\">\n  .scrollable {\n    height: 100%;\n    overflow: auto;\n    width: 100%;\n  }\n\n  .panel-body {\n    background-color: var(--inset-panel-background-color);\n    cursor: text;\n    height: 100%;\n  }\n\n  .console-lines {\n    &:empty {\n      padding: 0;\n    }\n\n    overflow: visible;\n  }\n\n  p {\n    display: flex;\n    margin: 0;\n\n    &[hidden] {\n      display: none;\n    }\n\n    .timestamp {\n      border-left: 5px solid;\n      padding: 5px;\n      margin-bottom: 5px;\n      user-select: none;\n\n      &.error {\n        border-color: var(--text-color-error);\n      }\n\n      &.info {\n        border-color: var(--text-color-info);\n      }\n\n      &.warning {\n        border-color: var(--text-color-warning);\n      }\n    }\n\n    .badge {\n      cursor: pointer;\n      font-size: 11px;\n      position: sticky;\n      top: 5px;\n    }\n\n    .message {\n      font-size: unset;\n      flex-grow: 1;\n      margin-bottom: var(--status-bar-height);\n\n      &::selection {\n        background-color: var(--background-color-selected);\n        color: var(--text-color-selected);\n      }\n    }\n  }\n</style>\n","import store from './store';\nimport { getConfig, getTimestamp, hideDock, showDock } from './utils';\nimport Console from './views/console.svelte';\nconst Logger = console;\n\nexport default class ConsoleView {\n\n  destroy() {\n    this.disposables?.dispose();\n  }\n\n  getElement() {\n    const element = document.createElement('console');\n\n    new Console({\n      target: element\n    });\n\n    return element;\n  }\n\n  getTitle() {\n    return 'Console';\n  }\n\n  getPath() {\n    return 'panel';\n  }\n\n  getURI() {\n    return `atom://console/${this.getPath()}`;\n  }\n\n  getDefaultLocation() {\n    return getConfig('panelLocation');\n  }\n\n  show() {\n    atom.workspace.open(this, { activatePane: false });\n    showDock();\n  }\n\n  hide() {\n    hideDock();\n  }\n\n  toggle() {\n    atom.workspace.toggle(this);\n  }\n\n  log(message, level) {\n    store.update(state => {\n      state.lines = [\n        ...state.lines || [],\n        {\n          level,\n          message,\n          timestamp: getTimestamp(),\n        }\n      ];\n\n      state.action = 'log';\n\n      return state;\n    });\n  }\n\n  clear() {\n    if (atom.inDevMode()) console.log('Clearing console');\n\n    store.update(state => {\n      state.action = 'clear';\n      state.lines = [];\n\n      return state;\n    });\n  }\n}\n","export default {\n  showTimestamp: {\n    description: 'Displays a timestamp next to the output',\n    type: 'boolean',\n    default: true,\n    order: 1\n  },\n  coloredBadges: {\n    description: 'Colors background of the timestamp badge',\n    type: 'boolean',\n    default: false,\n    order: 2\n  },\n  wordWrap: {\n    description: 'Wrap words if the line length exceeds the panel width',\n    type: 'boolean',\n    default: true,\n    order: 3\n  },\n  panelLocation: {\n    title: 'Panel Location',\n    description: 'Specifies the panel location. The change will only take effect on the next launch.',\n    type: 'string',\n    order: 4,\n    enum: [\n      {\n        value: 'bottom',\n        description: 'bottom'\n      },\n      {\n        value: 'left',\n        description: 'left'\n      },\n      {\n        value: 'right',\n        description: 'right'\n      }\n    ],\n    default: 'bottom'\n  },\n};\n","import { CompositeDisposable } from 'atom';\nimport ConsoleManager from './console-manager';\nimport ConsoleView from './console-view';\nimport configSchema from './config';\nconst Logger = console;\n\nexport default {\n  config: configSchema,\n  consoleView: null,\n  subscriptions: null,\n\n  activate() {\n    if (atom.inDevMode()) console.log('Activating package');\n\n    this.consoleView = new ConsoleView();\n    this.consoleManager = new ConsoleManager(this.consoleView);\n\n    // Events subscribed to in atom's system can be easily cleaned up with a CompositeDisposable\n    this.subscriptions = new CompositeDisposable();\n\n    // Register command that toggles this view\n    this.subscriptions.add(\n      atom.commands.add('atom-workspace', {\n        'console:show': () => this.consoleManager.show()\n      })\n    );\n\n    this.subscriptions.add(\n      atom.commands.add('atom-workspace', {\n        'console:hide': () => this.consoleManager.hide()\n      })\n    );\n\n    this.subscriptions.add(\n      atom.commands.add('atom-workspace', {\n        'console:toggle': () => this.consoleManager.toggle()\n      })\n    );\n\n    this.subscriptions.add(\n      atom.commands.add('atom-workspace', {\n        'console:clear': () => this.consoleManager.clear()\n      })\n    );\n\n    if (atom.inDevMode()) {\n      window.cp = this.consoleManager;\n\n      atom.commands.add('atom-workspace', {\n        'console:log': () => this.consoleManager.raw({ msg: 'Hello World'})\n      });\n    }\n  },\n\n  deactivate() {\n    if (atom.inDevMode()) console.log('Deactivating package');\n\n    this.subscriptions?.dispose();\n    this.consoleView?.destroy();\n  },\n\n  provideConsole() {\n    if (atom.inDevMode()) console.log('Providing service');\n\n    return this.consoleManager;\n  }\n};\n"],"names":["ConsoleManager","constructor","view","emitter","Emitter","destroy","dispose","hide","show","toggle","stickBottom","stickTop","log","message","level","error","warn","info","debug","raw","rawText","lineEnding","split","map","line","clear","writable","lines","showTimestamp","filters","getConfig","key","packageName","atom","config","get","getTimestamp","date","Date","visible","getHours","slice","getMinutes","getSeconds","getMilliseconds","tooltip","toString","mapLevel","text","icon","handleOverflow","ctx","length","includes","unsubscribe","store","subscribe","state","action","div","afterUpdate","scrollTo","left","top","scrollHeight","behaviour","wordWrap","coloredBadges","observe","newValue","onMount","statusBar","document","querySelector","offsetHeight","documentElement","style","setProperty","initStatusBarHeight","onDestroy","event","target","classList","filter","innerText","toLowerCase","update","index","indexOf","splice","push","ConsoleView","disposables","getElement","element","createElement","Console","getTitle","getPath","getURI","this","getDefaultLocation","workspace","open","activatePane","getLeftDock","getRightDock","getBottomDock","showDock","hideDock","timestamp","inDevMode","console","description","type","default","order","panelLocation","title","enum","value","consoleView","subscriptions","activate","consoleManager","CompositeDisposable","add","commands","window","cp","msg","deactivate","provideConsole"],"mappings":"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"}